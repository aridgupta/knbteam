# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthResponse {
  token: String!
  user: User!
}

type Board {
  createdAt: DateTime!
  id: ID!
  members: [User!]!
  name: String!
  owner: User!
  ownerId: String!
  stacks: [Stack!]!
  updatedAt: DateTime
}

type BoardCreateOrUpdateNotification {
  action: String!
  board: Board!
}

input BoardInput {
  boardId: String!
  name: String!
}

type BoardMember {
  board: Board!
  boardId: String!
  createdAt: DateTime!
  member: User!
  memberId: String!
}

type Card {
  assignees: [User!]!
  createdAt: DateTime!
  description: String
  id: ID!
  position: Int!
  stack: Stack!
  stackId: String!
  title: String!
  updatedAt: DateTime
}

type CardCreateOrUpdateNotification {
  action: String!
  card: Card!
}

input CardInput {
  cardId: String!
  description: String
  newPosition: Int
  title: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeletePayload {
  id: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createBoard(name: String!): Board!
  createBoardMember(boardId: String!, memberId: String!): BoardMember!
  createCard(stackId: String!, title: String!): Card!
  createCardAssignee(assigneeId: String!, cardId: String!): User!
  createStack(boardId: String!, name: String!): Stack!
  deleteBoard(boardId: String!): DeletePayload!
  deleteBoardMember(boardId: String!, memberId: String!): DeletePayload!
  deleteCard(cardId: String!): DeletePayload!
  deleteCardAssignee(assigneeId: String!, cardId: String!): DeletePayload!
  deleteStack(stackId: String!): DeletePayload!
  login(data: LoginInput!): AuthResponse!
  signup(data: SignupInput!): AuthResponse!
  updateBoard(input: BoardInput!): Board!
  updateCard(input: CardInput!): Card!
  updateStack(input: StackInput!): Stack!
}

type Query {
  boardMembers(boardId: String!): [User!]!
  boardOne(id: String!): Board!
  boards: [Board!]!
  cardAssignees(cardId: String!): [User!]!
  cardOne(cardId: String!): Card!
  cards(stackId: String!): [Card!]!
  currentUser: User!
  stackOne(stackId: String!): Stack!
  stacks(boardId: String!): [Stack!]!
}

input SignupInput {
  email: String!
  name: String!
  password: String!
}

type Stack {
  board: Board!
  boardId: String!
  cards: [Card!]!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime
}

type StackCreateOrUpdateNotification {
  action: String!
  stack: Stack!
}

input StackInput {
  name: String!
  stackId: String!
}

type Subscription {
  boardCreateOrUpdateNotification: BoardCreateOrUpdateNotification!
  cardCreateOrUpdateNotification(stackId: String!): CardCreateOrUpdateNotification!
  deleteBoardNotification(boardId: String!): DeletePayload!
  deleteCardNotification(cardId: String!): DeletePayload!
  deleteStackNotification(stackId: String!): DeletePayload!
  stackCreateOrUpdateNotification(boardId: String!): StackCreateOrUpdateNotification!
}

type User {
  boards: [Board!]!
  createdAt: DateTime!
  email: String!
  id: String!
  name: String!
}
